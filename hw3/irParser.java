/* Generated By:JavaCC: Do not edit this line. irParser.java */

import java.util.ArrayList;
import java.util.List;

public class irParser implements irParserConstants {

    static final private int[] jj_la1 = new int[29];
    static final private JJCalls[] jj_2_rtns = new JJCalls[2];
    static final private LookaheadSuccess jj_ls = new LookaheadSuccess();
    /**
     * Generated Token Manager.
     */
    static public irParserTokenManager token_source;
    /**
     * Current token.
     */
    static public Token token;
    /**
     * Next token.
     */
    static public Token jj_nt;
    static SimpleCharStream jj_input_stream;
    static private boolean jj_initialized_once = false;
    static private int jj_ntk;
    static private Token jj_scanpos, jj_lastpos;
    static private int jj_la;
    static private int jj_gen;
    static private int[] jj_la1_0;
    static private int[] jj_la1_1;

    static {
        jj_la1_init_0();
        jj_la1_init_1();
    }

    static private boolean jj_rescan = false;
    static private int jj_gc = 0;
    static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
    static private int[] jj_expentry;
    static private int jj_kind = -1;
    static private int[] jj_lasttokens = new int[100];
    static private int jj_endpos;

    /**
     * Constructor with InputStream.
     */
    public irParser(java.io.InputStream stream) {
        this(stream, null);
    }

    /**
     * Constructor with InputStream and supplied encoding
     */
    public irParser(java.io.InputStream stream, String encoding) {
        if (jj_initialized_once) {
            System.out.println("ERROR: Second call to constructor of static parser.  ");
            System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
            System.out.println("       during parser generation.");
            throw new Error();
        }
        jj_initialized_once = true;
        try {
            jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1);
        } catch (java.io.UnsupportedEncodingException e) {
            throw new RuntimeException(e);
        }
        token_source = new irParserTokenManager(jj_input_stream);
        token = new Token();
        jj_ntk = -1;
        jj_gen = 0;
        for (int i = 0; i < 29; i++) jj_la1[i] = -1;
        for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
    }

    /**
     * Constructor.
     */
    public irParser(java.io.Reader stream) {
        if (jj_initialized_once) {
            System.out.println("ERROR: Second call to constructor of static parser. ");
            System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
            System.out.println("       during parser generation.");
            throw new Error();
        }
        jj_initialized_once = true;
        jj_input_stream = new SimpleCharStream(stream, 1, 1);
        token_source = new irParserTokenManager(jj_input_stream);
        token = new Token();
        jj_ntk = -1;
        jj_gen = 0;
        for (int i = 0; i < 29; i++) jj_la1[i] = -1;
        for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
    }

    /**
     * Constructor with generated Token Manager.
     */
    public irParser(irParserTokenManager tm) {
        if (jj_initialized_once) {
            System.out.println("ERROR: Second call to constructor of static parser. ");
            System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
            System.out.println("       during parser generation.");
            throw new Error();
        }
        jj_initialized_once = true;
        token_source = tm;
        token = new Token();
        jj_ntk = -1;
        jj_gen = 0;
        for (int i = 0; i < 29; i++) jj_la1[i] = -1;
        for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
    }

    // Program -> {Data} {Func}
//
    static final public IR.Program Program() throws ParseException {
        List<IR.Data> data = new ArrayList<IR.Data>();
        IR.Data d;
        List<IR.Func> funcs = new ArrayList<IR.Func>();
        IR.Func f;
        label_1:
        while (true) {
            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                case kwData:
                case 24:
                    ;
                    break;
                default:
                    jj_la1[0] = jj_gen;
                    break label_1;
            }
            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                case kwData:
                    d = Data();
                    data.add(d);
                    break;
                case 24:
                    jj_consume_token(24);
                    break;
                default:
                    jj_la1[1] = jj_gen;
                    jj_consume_token(-1);
                    throw new ParseException();
            }
        }
        label_2:
        while (true) {
            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                case Global:
                    ;
                    break;
                default:
                    jj_la1[2] = jj_gen;
                    break label_2;
            }
            f = Func();
            funcs.add(f);
            label_3:
            while (true) {
                switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                    case 24:
                        ;
                        break;
                    default:
                        jj_la1[3] = jj_gen;
                        break label_3;
                }
                jj_consume_token(24);
            }
        }
        jj_consume_token(0);
        {
            if (true) return new IR.Program(data, funcs);
        }
        throw new Error("Missing return statement in function");
    }

    // Data -> "data" Global "(" "sz=" IntLit ")" ":" [Const {"," Const}] <EOL>
//
    static final public IR.Data Data() throws ParseException {
        List<IR.Const> items = new ArrayList<IR.Const>();
        IR.Global name;
        IR.IntLit size;
        IR.Const c;
        jj_consume_token(kwData);
        name = Global();
        jj_consume_token(25);
        jj_consume_token(kwSize);
        size = IntLit();
        jj_consume_token(26);
        jj_consume_token(27);
        switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
            case IntLit:
            case Global:
                c = Const();
                items.add(c);
                label_4:
                while (true) {
                    switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                        case 28:
                            ;
                            break;
                        default:
                            jj_la1[4] = jj_gen;
                            break label_4;
                    }
                    jj_consume_token(28);
                    c = Const();
                    items.add(c);
                }
                break;
            default:
                jj_la1[5] = jj_gen;
                ;
        }
        jj_consume_token(24);
        {
            if (true) return new IR.Data(name, size.i, items);
        }
        throw new Error("Missing return statement in function");
    }

    // Const -> Global | IntLit
//
    static final public IR.Const Const() throws ParseException {
        IR.Const c;
        switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
            case Global:
                c = Global();
                break;
            case IntLit:
                c = IntLit();
                break;
            default:
                jj_la1[6] = jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
        }
        {
            if (true) return c;
        }
        throw new Error("Missing return statement in function");
    }

    // Func -> Global VarList <EOL>          // Tgt Params
//         [VarList <EOL>]               // Locals
//         "{" {Inst | <EOL>} "}" <EOL>  // Body
//
    static final public IR.Func Func() throws ParseException {
        IR.Type type = null;
        IR.Global g;
        IR.Inst inst;
        List<String> params;
        List<String> locals = new ArrayList<String>();
        List<IR.Inst> code = new ArrayList<IR.Inst>();
        g = Global();
        params = VarList();
        jj_consume_token(24);
        switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
            case 25:
                locals = VarList();
                jj_consume_token(24);
                break;
            default:
                jj_la1[7] = jj_gen;
                ;
        }
        jj_consume_token(29);
        label_5:
        while (true) {
            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                case kwCall:
                case kwGoto:
                case kwIf:
                case kwReturn:
                case IntLit:
                case Temp:
                case Id:
                case 24:
                case 45:
                    ;
                    break;
                default:
                    jj_la1[8] = jj_gen;
                    break label_5;
            }
            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                case kwCall:
                case kwGoto:
                case kwIf:
                case kwReturn:
                case IntLit:
                case Temp:
                case Id:
                case 45:
                    inst = Inst();
                    code.add(inst);
                    break;
                case 24:
                    jj_consume_token(24);
                    break;
                default:
                    jj_la1[9] = jj_gen;
                    jj_consume_token(-1);
                    throw new ParseException();
            }
        }
        jj_consume_token(30);
        {
            if (true) return new IR.Func(g.name, params, locals, code);
        }
        throw new Error("Missing return statement in function");
    }

    static final public IR.Type Type() throws ParseException {
        Token t;
        IR.Type type;
        switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
            case IntType:
                t = jj_consume_token(IntType);
                type = IR.Type.INT;
                break;
            case BoolType:
                t = jj_consume_token(BoolType);
                type = IR.Type.BOOL;
                break;
            case PtrType:
                t = jj_consume_token(PtrType);
                type = IR.Type.PTR;
                break;
            default:
                jj_la1[10] = jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
        }
        {
            if (true) return type;
        }
        throw new Error("Missing return statement in function");
    }

    // VarList -> "(" [<Id> T{"," <Id>}] ")"
//
    static final public List<String> VarList() throws ParseException {
        Token t;
        IR.Type type = null;
        List<String> vars = new ArrayList<String>();
        jj_consume_token(25);
        switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
            case Id:
                t = jj_consume_token(Id);
                vars.add(t.image);
                label_6:
                while (true) {
                    switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                        case 28:
                            ;
                            break;
                        default:
                            jj_la1[11] = jj_gen;
                            break label_6;
                    }
                    jj_consume_token(28);
                    t = jj_consume_token(Id);
                    vars.add(t.image);
                }
                break;
            default:
                jj_la1[12] = jj_gen;
                ;
        }
        jj_consume_token(26);
        {
            if (true) return vars;
        }
        throw new Error("Missing return statement in function");
    }

    // Inst -> ( Dest "=" Src BOP Src              	     // Binop
//         | Dest "=" UOP Src                        // Unop
//         | Dest "=" Src                            // Move
//         | Dest "=" Addr Type                      // Load
//         | Addr Type "=" Src                       // Store
//         | [Dest "="] "call" ["*"] CallTgt ArgList // Call
//         | "return" [Src]                          // Return [val]
//         | "if" Src ROP Src "goto" Label     	     // CJump
//         | "goto" Label                            // Jump
//         | Label ":"                               // LabelDec
//         ) <EOL>
//
    static final public IR.Inst Inst() throws ParseException {
        IR.Label lab;
        IR.Type type = null;
        IR.BOP bop = null;
        IR.RelOP rop = null;
        IR.UOP uop;
        IR.Inst inst = null;
        IR.Addr addr;
        IR.Dest dst, loc = null;
        IR.Temp tmp = null;
        IR.Src src = null, src2 = null;
        IR.CallTgt c = null;
        List<IR.Src> args;
        boolean ind = false;
        int offset = 0;
        if (jj_2_2(2)) {
            dst = Dest();
            jj_consume_token(31);
            if (jj_2_1(2)) {
                addr = Addr();
                type = Type();
                inst = new IR.Load(type, dst, addr);
            } else {
                switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                    case IntLit:
                    case BoolLit:
                    case StrLit:
                    case Temp:
                    case Id:
                    case Global:
                        src = Src();
                        switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                            case 32:
                            case 33:
                            case 34:
                            case 35:
                            case 36:
                            case 37:
                            case 38:
                            case 39:
                            case 40:
                            case 41:
                            case 42:
                            case 43:
                                bop = BOP();
                                src2 = Src();
                                inst = new IR.Binop(bop, dst, src, src2);
                                break;
                            default:
                                jj_la1[13] = jj_gen;
                                ;
                        }
                        if (inst == null) inst = new IR.Move(dst, src);
                        break;
                    case 34:
                    case 44:
                        uop = UOP();
                        src = Src();
                        inst = new IR.Unop(uop, dst, src);
                        break;
                    case kwCall:
                        jj_consume_token(kwCall);
                        switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                            case 32:
                                jj_consume_token(32);
                                ind = true;
                                break;
                            default:
                                jj_la1[14] = jj_gen;
                                ;
                        }
                        c = CallTgt();
                        args = ArgList();
                        inst = new IR.Call(c, ind, args, dst);
                        break;
                    default:
                        jj_la1[15] = jj_gen;
                        jj_consume_token(-1);
                        throw new ParseException();
                }
            }
        } else {
            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                case IntLit:
                case 45:
                    addr = Addr();
                    type = Type();
                    jj_consume_token(31);
                    src = Src();
                    inst = new IR.Store(type, addr, src);
                    break;
                case kwCall:
                    jj_consume_token(kwCall);
                    switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                        case 32:
                            jj_consume_token(32);
                            ind = true;
                            break;
                        default:
                            jj_la1[16] = jj_gen;
                            ;
                    }
                    c = CallTgt();
                    args = ArgList();
                    inst = new IR.Call(c, ind, args);
                    break;
                case kwReturn:
                    jj_consume_token(kwReturn);
                    switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                        case IntLit:
                        case BoolLit:
                        case StrLit:
                        case Temp:
                        case Id:
                        case Global:
                            src = Src();
                            break;
                        default:
                            jj_la1[17] = jj_gen;
                            ;
                    }
                    inst = new IR.Return(src);
                    break;
                case kwIf:
                    jj_consume_token(kwIf);
                    src = Src();
                    rop = RelOP();
                    src2 = Src();
                    jj_consume_token(kwGoto);
                    lab = Label();
                    inst = new IR.CJump(rop, src, src2, lab);
                    break;
                case kwGoto:
                    jj_consume_token(kwGoto);
                    lab = Label();
                    inst = new IR.Jump(lab);
                    break;
                case Id:
                    lab = Label();
                    jj_consume_token(27);
                    inst = new IR.LabelDec(lab.name);
                    break;
                default:
                    jj_la1[18] = jj_gen;
                    jj_consume_token(-1);
                    throw new ParseException();
            }
        }
        jj_consume_token(24);
        {
            if (true) return inst;
        }
        throw new Error("Missing return statement in function");
    }

    // ArgList -> "(" [Src {"," Src}] ")"
//
    static final public List<IR.Src> ArgList() throws ParseException {
        List<IR.Src> args = new ArrayList<IR.Src>();
        IR.Src arg;
        jj_consume_token(25);
        switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
            case IntLit:
            case BoolLit:
            case StrLit:
            case Temp:
            case Id:
            case Global:
                arg = Src();
                args.add(arg);
                label_7:
                while (true) {
                    switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                        case 28:
                            ;
                            break;
                        default:
                            jj_la1[19] = jj_gen;
                            break label_7;
                    }
                    jj_consume_token(28);
                    arg = Src();
                    args.add(arg);
                }
                break;
            default:
                jj_la1[20] = jj_gen;
                ;
        }
        jj_consume_token(26);
        {
            if (true) return args;
        }
        throw new Error("Missing return statement in function");
    }

    static final public IR.ArithOP ArithOP() throws ParseException {
        IR.ArithOP op = null;
        switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
            case 33:
                jj_consume_token(33);
                op = IR.ArithOP.ADD;
                break;
            case 34:
                jj_consume_token(34);
                op = IR.ArithOP.SUB;
                break;
            case 32:
                jj_consume_token(32);
                op = IR.ArithOP.MUL;
                break;
            case 35:
                jj_consume_token(35);
                op = IR.ArithOP.DIV;
                break;
            case 36:
                jj_consume_token(36);
                op = IR.ArithOP.AND;
                break;
            case 37:
                jj_consume_token(37);
                op = IR.ArithOP.OR;
                break;
            default:
                jj_la1[21] = jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
        }
        {
            if (true) return op;
        }
        throw new Error("Missing return statement in function");
    }

    static final public IR.RelOP RelOP() throws ParseException {
        IR.RelOP op = null;
        switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
            case 38:
                jj_consume_token(38);
                op = IR.RelOP.EQ;
                break;
            case 39:
                jj_consume_token(39);
                op = IR.RelOP.NE;
                break;
            case 40:
                jj_consume_token(40);
                op = IR.RelOP.LT;
                break;
            case 41:
                jj_consume_token(41);
                op = IR.RelOP.LE;
                break;
            case 42:
                jj_consume_token(42);
                op = IR.RelOP.GT;
                break;
            case 43:
                jj_consume_token(43);
                op = IR.RelOP.GE;
                break;
            default:
                jj_la1[22] = jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
        }
        {
            if (true) return op;
        }
        throw new Error("Missing return statement in function");
    }

    static final public IR.BOP BOP() throws ParseException {
        IR.BOP op;
        switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
            case 32:
            case 33:
            case 34:
            case 35:
            case 36:
            case 37:
                op = ArithOP();
                break;
            case 38:
            case 39:
            case 40:
            case 41:
            case 42:
            case 43:
                op = RelOP();
                break;
            default:
                jj_la1[23] = jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
        }
        {
            if (true) return op;
        }
        throw new Error("Missing return statement in function");
    }

    static final public IR.UOP UOP() throws ParseException {
        IR.UOP op = null;
        switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
            case 34:
                jj_consume_token(34);
                op = IR.UOP.NEG;
                break;
            case 44:
                jj_consume_token(44);
                op = IR.UOP.NOT;
                break;
            default:
                jj_la1[24] = jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
        }
        {
            if (true) return op;
        }
        throw new Error("Missing return statement in function");
    }

    static final public IR.Label Label() throws ParseException {
        Token t;
        t = jj_consume_token(Id);
        {
            if (true) return new IR.Label(t.image);
        }
        throw new Error("Missing return statement in function");
    }

    // Addr -> [IntLit] "[" Dest "]"
//
    static final public IR.Addr Addr() throws ParseException {
        IR.IntLit v;
        int offset = 0;
        IR.Src src;
        switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
            case IntLit:
                v = IntLit();
                offset = v.i;
                break;
            default:
                jj_la1[25] = jj_gen;
                ;
        }
        jj_consume_token(45);
        src = Src();
        jj_consume_token(46);
        {
            if (true) return new IR.Addr(src, offset);
        }
        throw new Error("Missing return statement in function");
    }

    // Src -> Id | Temp | Global | IntLit | BoolLit | StrLit
//
    static final public IR.Src Src() throws ParseException {
        IR.Src src;
        switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
            case Id:
                src = Id();
                break;
            case Temp:
                src = Temp();
                break;
            case Global:
                src = Global();
                break;
            case IntLit:
                src = IntLit();
                break;
            case BoolLit:
                src = BoolLit();
                break;
            case StrLit:
                src = StrLit();
                break;
            default:
                jj_la1[26] = jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
        }
        {
            if (true) return src;
        }
        throw new Error("Missing return statement in function");
    }

    // Dest -> Id | Temp
//
    static final public IR.Dest Dest() throws ParseException {
        IR.Dest dst;
        switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
            case Id:
                dst = Id();
                break;
            case Temp:
                dst = Temp();
                break;
            default:
                jj_la1[27] = jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
        }
        {
            if (true) return dst;
        }
        throw new Error("Missing return statement in function");
    }

    // CallTgt -> Id | Temp | Global
//
    static final public IR.CallTgt CallTgt() throws ParseException {
        IR.CallTgt tgt;
        switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
            case Id:
                tgt = Id();
                break;
            case Temp:
                tgt = Temp();
                break;
            case Global:
                tgt = Global();
                break;
            default:
                jj_la1[28] = jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
        }
        {
            if (true) return tgt;
        }
        throw new Error("Missing return statement in function");
    }

    static final public IR.Id Id() throws ParseException {
        Token t;
        t = jj_consume_token(Id);
        {
            if (true) return new IR.Id(t.image);
        }
        throw new Error("Missing return statement in function");
    }

    static final public IR.Temp Temp() throws ParseException {
        Token t;
        String s;
        t = jj_consume_token(Temp);
        s = t.image.substring(1, t.image.length());
        {
            if (true) return new IR.Temp(Integer.parseInt(s));
        }
        throw new Error("Missing return statement in function");
    }

    static final public IR.Global Global() throws ParseException {
        Token t;
        t = jj_consume_token(Global);
        {
            if (true) return new IR.Global(t.image.substring(1, t.image.length()));
        }
        throw new Error("Missing return statement in function");
    }

    static final public IR.IntLit IntLit() throws ParseException {
        Token t;
        t = jj_consume_token(IntLit);
        {
            if (true) return new IR.IntLit(Integer.parseInt(t.image));
        }
        throw new Error("Missing return statement in function");
    }

    static final public IR.BoolLit BoolLit() throws ParseException {
        Token t;
        t = jj_consume_token(BoolLit);
        {
            if (true) return new IR.BoolLit(Boolean.parseBoolean(t.image));
        }
        throw new Error("Missing return statement in function");
    }

    static final public IR.StrLit StrLit() throws ParseException {
        Token t;
        t = jj_consume_token(StrLit);
        {
            if (true) return new IR.StrLit(t.image.substring(1, t.image.length() - 1));
        }
        throw new Error("Missing return statement in function");
    }

    static private boolean jj_2_1(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_1();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(0, xla);
        }
    }

    static private boolean jj_2_2(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_2();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(1, xla);
        }
    }

    static private boolean jj_3R_20() {
        if (jj_3R_25()) return true;
        return false;
    }

    static private boolean jj_3R_22() {
        if (jj_scan_token(Temp)) return true;
        return false;
    }

    static private boolean jj_3R_17() {
        if (jj_3R_23()) return true;
        return false;
    }

    static private boolean jj_3R_21() {
        if (jj_scan_token(Id)) return true;
        return false;
    }

    static private boolean jj_3R_13() {
        if (jj_3R_22()) return true;
        return false;
    }

    static private boolean jj_3R_19() {
        if (jj_3R_24()) return true;
        return false;
    }

    static private boolean jj_3R_25() {
        if (jj_scan_token(StrLit)) return true;
        return false;
    }

    static private boolean jj_3R_16() {
        if (jj_3R_22()) return true;
        return false;
    }

    static private boolean jj_3R_12() {
        if (jj_3R_21()) return true;
        return false;
    }

    static private boolean jj_3R_9() {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_12()) {
            jj_scanpos = xsp;
            if (jj_3R_13()) return true;
        }
        return false;
    }

    static private boolean jj_3R_24() {
        if (jj_scan_token(BoolLit)) return true;
        return false;
    }

    static private boolean jj_3_1() {
        if (jj_3R_8()) return true;
        return false;
    }

    static private boolean jj_3R_18() {
        if (jj_3R_14()) return true;
        return false;
    }

    static private boolean jj_3R_15() {
        if (jj_3R_21()) return true;
        return false;
    }

    static private boolean jj_3R_14() {
        if (jj_scan_token(IntLit)) return true;
        return false;
    }

    static private boolean jj_3_2() {
        if (jj_3R_9()) return true;
        if (jj_scan_token(31)) return true;
        return false;
    }

    static private boolean jj_3R_11() {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_15()) {
            jj_scanpos = xsp;
            if (jj_3R_16()) {
                jj_scanpos = xsp;
                if (jj_3R_17()) {
                    jj_scanpos = xsp;
                    if (jj_3R_18()) {
                        jj_scanpos = xsp;
                        if (jj_3R_19()) {
                            jj_scanpos = xsp;
                            if (jj_3R_20()) return true;
                        }
                    }
                }
            }
        }
        return false;
    }

    static private boolean jj_3R_23() {
        if (jj_scan_token(Global)) return true;
        return false;
    }

    static private boolean jj_3R_10() {
        if (jj_3R_14()) return true;
        return false;
    }

    static private boolean jj_3R_8() {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_10()) jj_scanpos = xsp;
        if (jj_scan_token(45)) return true;
        if (jj_3R_11()) return true;
        return false;
    }

    private static void jj_la1_init_0() {
        jj_la1_0 = new int[]{0x1000080, 0x1000080, 0x800000, 0x1000000, 0x10000000, 0x808000, 0x808000, 0x2000000, 0x1608f00, 0x1608f00, 0x1c0000, 0x10000000, 0x400000, 0x0, 0x0, 0xe38100, 0x0, 0xe38000, 0x408f00, 0x10000000, 0xe38000, 0x0, 0x0, 0x0, 0x0, 0x8000, 0xe38000, 0x600000, 0xe00000,};
    }

    private static void jj_la1_init_1() {
        jj_la1_1 = new int[]{0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x2000, 0x2000, 0x0, 0x0, 0x0, 0xfff, 0x1, 0x1004, 0x1, 0x0, 0x2000, 0x0, 0x0, 0x3f, 0xfc0, 0xfff, 0x1004, 0x0, 0x0, 0x0, 0x0,};
    }

    /**
     * Reinitialise.
     */
    static public void ReInit(java.io.InputStream stream) {
        ReInit(stream, null);
    }

    /**
     * Reinitialise.
     */
    static public void ReInit(java.io.InputStream stream, String encoding) {
        try {
            jj_input_stream.ReInit(stream, encoding, 1, 1);
        } catch (java.io.UnsupportedEncodingException e) {
            throw new RuntimeException(e);
        }
        token_source.ReInit(jj_input_stream);
        token = new Token();
        jj_ntk = -1;
        jj_gen = 0;
        for (int i = 0; i < 29; i++) jj_la1[i] = -1;
        for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
    }

    /**
     * Reinitialise.
     */
    static public void ReInit(java.io.Reader stream) {
        jj_input_stream.ReInit(stream, 1, 1);
        token_source.ReInit(jj_input_stream);
        token = new Token();
        jj_ntk = -1;
        jj_gen = 0;
        for (int i = 0; i < 29; i++) jj_la1[i] = -1;
        for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
    }

    static private Token jj_consume_token(int kind) throws ParseException {
        Token oldToken;
        if ((oldToken = token).next != null) token = token.next;
        else token = token.next = token_source.getNextToken();
        jj_ntk = -1;
        if (token.kind == kind) {
            jj_gen++;
            if (++jj_gc > 100) {
                jj_gc = 0;
                for (int i = 0; i < jj_2_rtns.length; i++) {
                    JJCalls c = jj_2_rtns[i];
                    while (c != null) {
                        if (c.gen < jj_gen) c.first = null;
                        c = c.next;
                    }
                }
            }
            return token;
        }
        token = oldToken;
        jj_kind = kind;
        throw generateParseException();
    }

    static private boolean jj_scan_token(int kind) {
        if (jj_scanpos == jj_lastpos) {
            jj_la--;
            if (jj_scanpos.next == null) {
                jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
            } else {
                jj_lastpos = jj_scanpos = jj_scanpos.next;
            }
        } else {
            jj_scanpos = jj_scanpos.next;
        }
        if (jj_rescan) {
            int i = 0;
            Token tok = token;
            while (tok != null && tok != jj_scanpos) {
                i++;
                tok = tok.next;
            }
            if (tok != null) jj_add_error_token(kind, i);
        }
        if (jj_scanpos.kind != kind) return true;
        if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
        return false;
    }

    /**
     * Get the next Token.
     */
    static final public Token getNextToken() {
        if (token.next != null) token = token.next;
        else token = token.next = token_source.getNextToken();
        jj_ntk = -1;
        jj_gen++;
        return token;
    }

    /**
     * Get the specific Token.
     */
    static final public Token getToken(int index) {
        Token t = token;
        for (int i = 0; i < index; i++) {
            if (t.next != null) t = t.next;
            else t = t.next = token_source.getNextToken();
        }
        return t;
    }

    static private int jj_ntk() {
        if ((jj_nt = token.next) == null)
            return (jj_ntk = (token.next = token_source.getNextToken()).kind);
        else
            return (jj_ntk = jj_nt.kind);
    }

    static private void jj_add_error_token(int kind, int pos) {
        if (pos >= 100) return;
        if (pos == jj_endpos + 1) {
            jj_lasttokens[jj_endpos++] = kind;
        } else if (jj_endpos != 0) {
            jj_expentry = new int[jj_endpos];
            for (int i = 0; i < jj_endpos; i++) {
                jj_expentry[i] = jj_lasttokens[i];
            }
            jj_entries_loop:
            for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext(); ) {
                int[] oldentry = (int[]) (it.next());
                if (oldentry.length == jj_expentry.length) {
                    for (int i = 0; i < jj_expentry.length; i++) {
                        if (oldentry[i] != jj_expentry[i]) {
                            continue jj_entries_loop;
                        }
                    }
                    jj_expentries.add(jj_expentry);
                    break jj_entries_loop;
                }
            }
            if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
        }
    }

    /**
     * Generate ParseException.
     */
    static public ParseException generateParseException() {
        jj_expentries.clear();
        boolean[] la1tokens = new boolean[47];
        if (jj_kind >= 0) {
            la1tokens[jj_kind] = true;
            jj_kind = -1;
        }
        for (int i = 0; i < 29; i++) {
            if (jj_la1[i] == jj_gen) {
                for (int j = 0; j < 32; j++) {
                    if ((jj_la1_0[i] & (1 << j)) != 0) {
                        la1tokens[j] = true;
                    }
                    if ((jj_la1_1[i] & (1 << j)) != 0) {
                        la1tokens[32 + j] = true;
                    }
                }
            }
        }
        for (int i = 0; i < 47; i++) {
            if (la1tokens[i]) {
                jj_expentry = new int[1];
                jj_expentry[0] = i;
                jj_expentries.add(jj_expentry);
            }
        }
        jj_endpos = 0;
        jj_rescan_token();
        jj_add_error_token(0, 0);
        int[][] exptokseq = new int[jj_expentries.size()][];
        for (int i = 0; i < jj_expentries.size(); i++) {
            exptokseq[i] = jj_expentries.get(i);
        }
        return new ParseException(token, exptokseq, tokenImage);
    }

    /**
     * Enable tracing.
     */
    static final public void enable_tracing() {
    }

    /**
     * Disable tracing.
     */
    static final public void disable_tracing() {
    }

    static private void jj_rescan_token() {
        jj_rescan = true;
        for (int i = 0; i < 2; i++) {
            try {
                JJCalls p = jj_2_rtns[i];
                do {
                    if (p.gen > jj_gen) {
                        jj_la = p.arg;
                        jj_lastpos = jj_scanpos = p.first;
                        switch (i) {
                            case 0:
                                jj_3_1();
                                break;
                            case 1:
                                jj_3_2();
                                break;
                        }
                    }
                    p = p.next;
                } while (p != null);
            } catch (LookaheadSuccess ls) {
            }
        }
        jj_rescan = false;
    }

    static private void jj_save(int index, int xla) {
        JJCalls p = jj_2_rtns[index];
        while (p.gen > jj_gen) {
            if (p.next == null) {
                p = p.next = new JJCalls();
                break;
            }
            p = p.next;
        }
        p.gen = jj_gen + xla - jj_la;
        p.first = token;
        p.arg = xla;
    }

    /**
     * Reinitialise.
     */
    public void ReInit(irParserTokenManager tm) {
        token_source = tm;
        token = new Token();
        jj_ntk = -1;
        jj_gen = 0;
        for (int i = 0; i < 29; i++) jj_la1[i] = -1;
        for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
    }

    static private final class LookaheadSuccess extends java.lang.Error {
    }

    static final class JJCalls {
        int gen;
        Token first;
        int arg;
        JJCalls next;
    }

}
